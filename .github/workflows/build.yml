name: docker build and push

on:
  push:
    branches:
      - main
    paths:
      - 'strapi/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPO_NAME: strapi-artifacts

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        working-directory: strapi
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Update ECS task definition with new image
        run: |
          sed -i 's|image = ".*"|image = "${{ env.IMAGE_URI }}"|' Deployment_infra/ECS/task_definition.tf

      - name: Set up SSH for Git push
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Commit and push updated task definition
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin git@github.com:${{ github.repository }}.git
          git add Deployment_infra/ECS/task_definition.tf
          git commit -m "chore: update image tag to $IMAGE_TAG"
          git push origin main

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Initialize
        working-directory: Deployment_infra
        run: terraform init

      - name: Terraform Format Check
        working-directory: Deployment_infra
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        working-directory: Deployment_infra
        run: terraform validate

      - name: Plan Terraform changes
        working-directory: Deployment_infra
        run: terraform plan

      - name: Apply Terraform changes
        working-directory: Deployment_infra
        run: terraform apply -auto-approve
