name: docker-build-push-codedeploy

on:
  push:
    branches:
      - main
    paths:
      - 'strapi/**'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPO_NAME: strapi-artifacts
  S3_BUCKET: strapi-codedeploy-bucket752
  CODEDEPLOY_APP: strapi-codedeploy
  CODEDEPLOY_GROUP: strapi-deploy-group

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        id: build
        working-directory: strapi
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Update ECS task definition with new image tag
        run: |
          sed -i 's|image = ".*"|image = "${{ steps.build.outputs.image_uri }}"|' Deployment_infra/ECS/task_definition.tf

      - name: Set up SSH access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Commit and push updated task definition
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin git@github.com:${{ github.repository }}.git
          git add Deployment_infra/ECS/task_definition.tf
          git commit -m "chore: update image tag to $IMAGE_TAG"
          git push origin main

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      task_arn: ${{ steps.output-task.outputs.task_arn }}

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: Deployment_infra
        run: terraform init

      - name: Terraform Apply
        working-directory: Deployment_infra
        run: |
          terraform apply -auto-approve || { echo "Terraform apply failed"; exit 1; }

      - name: Debug Terraform Outputs
        working-directory: Deployment_infra
        run: |
          echo "All terraform outputs:"
          terraform output
          echo "Checking if latest_task_definition_arn output exists:"
          terraform output latest_task_definition_arn || echo "Output 'latest_task_definition_arn' not found"

      - name: Output new Task Definition ARN
        id: output-task
        working-directory: Deployment_infra
        run: |
          TASK_ARN=$(terraform output -raw latest_task_definition_arn)
          echo "Debug - Task ARN from terraform: $TASK_ARN"
          if [ -z "$TASK_ARN" ]; then
            echo "Error: Failed to retrieve TASK_ARN from Terraform output"
            exit 1
          fi
          echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT

  codedeploy-deploy:
    runs-on: ubuntu-latest
    needs: terraform-deploy
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug Task ARN
        run: |
          echo "Task ARN from previous job: ${{ needs.terraform-deploy.outputs.task_arn }}"
          if [ -z "${{ needs.terraform-deploy.outputs.task_arn }}" ]; then
            echo "Error: Task ARN is empty!"
            exit 1
          fi

      - name: Generate AppSpec and Upload to S3
        run: |
          TASK_ARN="${{ needs.terraform-deploy.outputs.task_arn }}"
          echo "Task ARN from terraform: $TASK_ARN"  # debug print
          mkdir -p appspec
          cat <<EOF > appspec/appspec.yaml
          version: 1
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: $TASK_ARN
                  LoadBalancerInfo:
                    ContainerName: "strapi"
                    ContainerPort: 1337
          EOF
          echo "Generated AppSpec content:"
          cat appspec/appspec.yaml  # debug print
          aws s3 cp appspec/appspec.yaml s3://${S3_BUCKET}/appspec-${{ github.sha }}.yaml

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_GROUP \
            --s3-location bucket=$S3_BUCKET,bundleType=YAML,key=appspec-${{ github.sha }}.yaml \
            --description "Deploying $IMAGE_TAG"